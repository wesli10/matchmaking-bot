"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const ignore_1 = __importDefault(require("ignore"));
exports.default = {
    name: 'init',
    run: ({ filesystem: { append, read, exists, remove }, template: { generate }, print: { colors: { highlight }, error, fancy, spin, }, prompt: { ask }, system: { run, which }, }) => __awaiter(void 0, void 0, void 0, function* () {
        if (exists('.supabase')) {
            error(`Project already initialized. Remove ${highlight('.supabase')} to reinitialize.`);
            process.exit(1);
        }
        // Cleanup on Ctrl+C
        process.on('SIGINT', () => {
            remove('.supabase');
            error(`Aborted ${highlight('supabase init')}.`);
            process.exit(1);
        });
        const dockerCompose = which('docker-compose');
        if (!dockerCompose) {
            error(`Cannot find ${highlight('docker-compose')} executable in PATH.`);
            process.exit(1);
        }
        // Add .supabase to .gitignore
        const gitignore = read('.gitignore');
        if (gitignore) {
            const ig = ignore_1.default().add(gitignore);
            if (!ig.ignores('.supabase')) {
                append('.gitignore', '\n# Supabase\n.supabase\n');
            }
        }
        const { kongPort, dbPort, mailPort } = yield ask([
            {
                type: 'input',
                name: 'kongPort',
                message: 'Port for Supabase URL:',
                initial: '8000',
            },
            {
                type: 'input',
                name: 'dbPort',
                message: 'Port for PostgreSQL database:',
                initial: '5432',
            },
            {
                type: 'input',
                name: 'mailPort',
                message: 'Port for email testing interface:',
                initial: '9000',
            },
        ]);
        const anonApiKey = 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJzdXBhYmFzZSIsImlhdCI6MTYwMzk2ODgzNCwiZXhwIjoyNTUwNjUzNjM0LCJyb2xlIjoiYW5vbiJ9.36fUebxgx1mcBo4s19v0SzqmzunP--hm_hep0uLX0ew';
        const serviceRoleApiKey = 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJzdXBhYmFzZSIsImlhdCI6MTYwMzk2ODgzNCwiZXhwIjoyNTUwNjUzNjM0LCJyb2xlIjoic2VydmljZV9yb2xlIn0.necIJaiP7X2T2QjGeV-FhpkizcNTX8HjDDBAxpgQTEI';
        const spinner = spin('Initializing project...');
        // Write templates
        yield Promise.all([
            'docker/kong/Dockerfile',
            'docker/kong/kong.yml',
            'docker/postgres/00-initial-schema.sql',
            'docker/postgres/Dockerfile',
            'docker/postgres/auth-schema.sql',
            'docker/postgres/storage-schema.sql',
            'docker/docker-compose.yml',
            'README.md',
        ].map((f) => generate({
            template: `init/${f}`,
            target: `.supabase/${f}`,
            props: {
                kongPort,
                dbPort,
                mailPort,
                anonApiKey,
                serviceRoleApiKey,
            },
        }))).catch((err) => {
            remove('.supabase');
            spinner.fail(`Error writing Docker setup files: ${err.message}`);
            process.exit(1);
        });
        yield run('docker-compose --file .supabase/docker/docker-compose.yml build --no-cache && docker-compose --file .supabase/docker/docker-compose.yml --project-name supabase up --build --no-start --renew-anon-volumes', { trim: true }).catch((err) => {
            remove('.supabase');
            spinner.fail(`Error running docker-compose: ${err.stderr}`);
            process.exit(1);
        });
        spinner.succeed('Project initialized.');
        fancy(`Supabase URL: ${highlight(`http://localhost:${kongPort}`)}
Supabase Key (anon, public): ${highlight(anonApiKey)}
Supabase Key (service_role, private): ${highlight(serviceRoleApiKey)}
Database URL: ${highlight(`postgres://postgres:postgres@localhost:${dbPort}/postgres`)}
Email testing interface URL: ${highlight(`http://localhost:${mailPort}`)}

Run ${highlight('supabase start')} to start local Supabase.
`);
    }),
};
//# sourceMappingURL=init.js.map