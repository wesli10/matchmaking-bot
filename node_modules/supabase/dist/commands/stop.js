"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = {
    name: 'stop',
    run: ({ filesystem: { exists }, print: { colors: { highlight }, error, spin, }, system: { run, which }, }) => __awaiter(void 0, void 0, void 0, function* () {
        if (!exists('.supabase')) {
            error(`Cannot find ${highlight('.supabase')} in the current directory. Perhaps you meant to run ${highlight('supabase init')} first?`);
            process.exit(1);
        }
        const dockerCompose = which('docker-compose');
        if (!dockerCompose) {
            error(`Cannot find ${highlight('docker-compose')} executable in PATH.`);
            process.exit(1);
        }
        const spinner = spin('Stopping local Supabase...');
        yield run('docker-compose --file .supabase/docker/docker-compose.yml --project-name supabase stop').catch(() => {
            spinner.fail('Error running docker-compose.');
            process.exit(1);
        });
        spinner.succeed('Stopped local Supabase.');
    }),
};
//# sourceMappingURL=stop.js.map