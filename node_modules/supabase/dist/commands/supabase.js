"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = {
    name: 'supabase',
    run: ({ meta: { version }, parameters: { options }, print: { error, info, fancy, colors: { bold, green, muted, highlight }, }, }) => __awaiter(void 0, void 0, void 0, function* () {
        const printHelp = () => fancy(`${muted(`Supabase CLI ${version()}`)}

  ${bold(`${green('ÏŸ')} supabase`)} [options] [<command>]

  Commands:

    init                  Initialize project
    start                 Start local Supabase
    stop                  Stop local Supabase
    eject                 Create a ${highlight('docker')} directory with the Docker setup for Supabase.
                          See ${highlight('https://supabase.io/docs/guides/self-hosting')} for details.

  Options:

    -h, --help            Show usage information
    -v, --version         Show version number
`);
        for (const opt in options) {
            if (opt === 'h' || opt === 'help') {
                printHelp();
                return;
            }
            if (opt === 'v' || opt === 'version') {
                info(version());
                return;
            }
            // unrecognized opt
            printHelp();
            error(`Unknown or unexpected option: ${opt}.`);
            process.exit(1);
        }
        // options.length === 0
        printHelp();
    }),
};
//# sourceMappingURL=supabase.js.map